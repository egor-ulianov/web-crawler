version: '3.9'
networks:
  webcrawler:
    driver: bridge

services:
  frontend:
    image: webcrawler/frontend
    container_name: webcrawler-frontend
    build: 
      context: ./webcrawler-frontend
      dockerfile: Dockerfile
    ports:
      - 4201:4200
    networks:
      - webcrawler
    volumes:
      - ./webcrawler-frontend:/usr/src/app
      - /usr/src/app/node_modules
    environment:
      - NODE_ENV=development
  rabbitmq:
    image: rabbitmq
    container_name: webcrawler-rabbitmq
    volumes:
      - /var/lib/rabbitmq/mnesia
    networks:
      - webcrawler
    ports:
      - 5672:5672
  crawl-executor:
    image: webcrawler/crawl-executor
    container_name: webcrawler-crawl-executor
    build: 
      context: ./webcrawler-backend
      dockerfile: ./apps/crawl-executor/Dockerfile
      target: development
    command: npm run start:dev crawl-executor
    depends_on:
      - database
    restart: unless-stopped
    volumes:
      - ./webcrawler-backend:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - webcrawler
    env_file:
      - .env
  crawl-planner:
    image: webcrawler/crawl-planner
    container_name: webcrawler-crawl-planner
    build: 
      context: ./webcrawler-backend
      dockerfile: ./apps/crawl-planner/Dockerfile
      target: development
    command: npm run start:dev crawl-planner
    depends_on:
      - database
    restart: unless-stopped
    volumes:
      - ./webcrawler-backend:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - webcrawler
    env_file:
      - .env
  websites:
    image: webcrawler/websites
    container_name: webcrawler-websites
    build: 
      context: ./webcrawler-backend
      dockerfile: ./apps/websites/Dockerfile
      target: development
    command: npm run start:dev websites
    depends_on:
      - database
    restart: unless-stopped
    volumes:
      - ./webcrawler-backend:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - 3000:3000
    networks:
      - webcrawler
    env_file:
      - .env
  database:
    image: webcrawler/database
    container_name: webcrawler-database
    build: 
      context: ./backend/database/
      dockerfile: Dockerfile
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB : ${POSTGRES_DATABASE}
      PGDATA: /data/postgres
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    ports:
      - 54320:${DATABASE_PORT}
    networks:
      - webcrawler
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5
  adminer:
    image: adminer
    container_name: webcrawler-adminer
    restart: always
    ports:
      - 8093:8080
    networks:
      - webcrawler
    depends_on:
      - database
  nginx:
    container_name: nginx
    image: webcrawler-nginx
    build:
      context: ./nginx/
      dockerfile: Dockerfile
    ports:
      - 80:80
    networks:
      - webcrawler
    links:
      - frontend
      - websites
volumes:
  postgres_data: